openapi: 3.0.3
info:
  title: PieFed OpenAPI Documentation
  version: alpha
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html#license-text
  x-logo:
    url: https://codeberg.org/rimu/pyfedi/src/branch/main/app/static/images/piefed_logo_full_t_300x300.svg
    altText: PieFed Icon
    href: https://github.com/freamon/piefed-api
  contact:
    url: https://github.com/freamon/piefed-api
servers:
  - url: https://preferred.social/api/alpha
  - url: https://pythag.net/api/alpha
security:
  - bearerAuth: []
paths:
  /site:
    get:
      summary: Gets the site, and your user data.
      tags:
        - Site
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /site/block:
    post:
      tags:
        - Site
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockInstance'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInstanceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Block an instance.
  /search:
    get:
      tags:
        - Miscellaneous
      summary: Search PieFed.
      parameters:
        - name: Search
          in: query
          schema:
            $ref: '#/components/schemas/Search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /community:
    get:
      tags:
        - Community
      parameters:
        - name: GetCommunity
          explode: true
          in: query
          schema:
            $ref: '#/components/schemas/GetCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch a community.
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Create a new community.
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Edit community.
  /community/delete:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Delete a community.
  /community/list:
    get:
      tags:
        - Community
      parameters:
        - name: ListCommunities
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/ListCommunities'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommunitiesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: List communities, with various filters.
  /community/follow:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Follow / subscribe to a community.
  /community/block:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Block a community.
  /community/subscribe:
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeCommunity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Subscribe to activities in a community.
  /community/moderate/bans:
    get:
      tags:
        - Community
      parameters:
        - name: GetCommunityModerationBansList
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/GetCommunityModerationBansList'        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityModerationBansListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get the list of banned users for a community. 
  /community/moderate/ban:
    post:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommunityModerateBan'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommunityModerateBanResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'      
      summary: Ban a user from a community.
  /community/moderate/unban:
    put:
      tags:
        - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCommunityModerateUnBan'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutCommunityModerateUnBanResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'      
      summary: Unban a user from a community.   
  /community/moderate/post/nsfw:
    post: 
      tags:
       - Community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommunityModeratePostNsfw'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCommunityModeratePostNsfwResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'        
      summary: Mark or unmark a post as NSFW.
  /post/list:
    get:
      tags:
        - Post
      parameters:
        - name: GetPosts
          explode: true
          in: query
          schema:
            $ref: '#/components/schemas/GetPosts'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch posts, with various filters.
  /post:
    get:
      tags:
        - Post
      parameters:
        - name: GetPost
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/GetPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch a post.
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Edit a post.
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Create a post.
  /post/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostLike'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Like / vote on a post.
  /post/save:
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Save a post.
  /post/subscribe:
    put:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Subscribe to a post.
  /post/delete:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Delete a post.
  /post/report:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostReport'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Report a post.
  /post/lock:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: A moderator can lock a post ( IE disable new comments ).
  /post/feature:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeaturePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: A moderator can feature a community post ( IE stick it to the top of a community ).
  /post/remove:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: A moderator remove for a post.
  /comment:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Create a comment.
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Edit a comment.
    get:
      tags:
        - Comment
      parameters:
        - in: query
          name: GetComments
          schema:
            $ref: '#/components/schemas/GetComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch a comment.
  /comment/list:
    get:
      tags:
        - Comment
      parameters:
        - in: query
          name: GetComments
          schema:
            $ref: '#/components/schemas/GetComments'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch comments.
  /comment/delete:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Delete a comment.
  /comment/remove:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: A moderator remove for a comment.
  /comment/like:
    post:
      tags:
        - Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentLike'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Like / vote on a comment.
  /comment/save:
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Save a comment.
  /comment/subscribe:
    put:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeComment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Subscribe to a comment.
  /comment/report:
    post:
      tags:
        - Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentReport'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentReportResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Report a comment.
  /private_message/list:
    get:
      tags:
        - PrivateMessage
      parameters:
        - in: query
          name: GetPrivateMessages
          schema:
            $ref: '#/components/schemas/GetPrivateMessages'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessagesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get / fetch private messages.
  /user:
    get:
      tags:
        - User
      parameters:
        - name: GetPersonDetails
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/GetPersonDetails'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPersonDetailsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get the details for a person.
  /user/replies:
    get:
      tags:
        - User
      parameters:
        - name: GetReplies
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/GetReplies'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepliesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get comment replies.
  /user/block:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockPerson'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockPersonResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Block a person.
  /user/login:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: BAD REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseLogin'
      summary: Log into PieFed.
  /user/mark_all_as_read:
    post:
      tags:
        - User
      operationId: markAllAsRead
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepliesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Mark all replies as read.
  /user/unread_count:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnreadCountResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get your unread counts
  /user/subscribe:
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribePerson'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Subscribe to activities from another user
  /user/save_user_settings:
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserSettings'
      responses:
        '200':
          description: OK
      summary: Save your user settings.
  /user/notifications:
    get:
      tags:
        - User
      parameters:
        - name: Status
          in: query
          explode: true
          schema:
            $ref: '#/components/schemas/GetNotificationStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'          
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'                
      summary: Get your user notifications
  /user/notification_state:
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditNotificationState'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsReadStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/BadRequest'                
      summary: Set the read status of a given notification.
  /user/notifications_count:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsCountResponse'    
        '400':
          description: Bad request
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/BadRequest'                
      summary: Get user unread notifications count.
  /user/mark_all_notifications_read:
    put:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsMarkAllReadResponse'    
        '400':
          description: Bad request
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/BadRequest'         
      summary: Set all unread user notifications to read.
  /upload/image:
    post:
      tags:
        - Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUpload'
            encoding:
              file:
                contentType: >-
                  image/jpeg, image/jpg, image/gif, image/png, image/jxl,
                  image/heic, image/heif, image/webp, image/avif
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: The uploaded image was missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /upload/community_image:
    post:
      tags:
        - Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUpload'
            encoding:
              file:
                contentType: >-
                  image/jpeg, image/jpg, image/gif, image/png, image/jxl,
                  image/heic, image/heif, image/webp, image/avif
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: The uploaded image was missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
  /upload/user_image:
    post:
      tags:
        - Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUpload'
            encoding:
              file:
                contentType: >-
                  image/jpeg, image/jpg, image/gif, image/png, image/jxl,
                  image/heic, image/heif, image/webp, image/avif
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          description: The uploaded image was missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '429':
          description: You are being rate limited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    errorResponseLogin:
      properties:
        error:
          type: string
          enum:
            - incorrect_login
    SiteId:
      title: SiteId
      type: integer
    InstanceId:
      title: InstanceId
      type: integer
    Site:
      properties:
        name:
          title: Site.name
          type: string
        description:
          title: Site.description
          type: string
        sidebar:
          title: Site.sidebar
          type: string
        icon:
          title: Site.icon
          type: string
        enable_downvotes:
          title: Site.enable_downvotes
          type: boolean
        actor_id:
          title: Site.actor_id
          type: string
        user_count:
          title: Site.user_count
          type: integer
        registration_mode:
          $ref: '#/components/schemas/RegistrationMode'
          title: Site.registration_mode
        all_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: Site.all_languages
          type: array
      required:
        - name
        - actor_id
      additionalProperties: false
      title: Site
      type: object
    ListingType:
      enum:
        - All
        - Local
        - Subscribed
        - Popular
        - ModeratorView
      title: ListingType
      type: string
    RegistrationMode:
      enum:
        - Closed
        - RequireApplication
        - Open
      title: RegistrationMode
      type: string
    SortType:
      enum:
        - Active
        - Hot
        - New
        - TopHour
        - TopSixHour
        - TopTwelveHour
        - TopDay
        - TopWeek
        - TopMonth
        - Scaled
      title: SortType
      type: string
    CommunitySortType:
      enum:
        - Active
        - New
      title: CommunitySortType
      type: string
    PersonId:
      title: PersonId
      type: integer
    Person:
      properties:
        id:
          $ref: '#/components/schemas/PersonId'
          title: Person.id
        user_name:
          title: Person.user_name
          type: string
        banned:
          title: Person.banned
          type: boolean
        published:
          title: Person.published
          type: string
        actor_id:
          title: Person.actor_id
          type: string
        local:
          title: Person.local
          type: boolean
        deleted:
          title: Person.deleted
          type: boolean
        bot_account:
          title: Person.bot_account
          type: boolean
        instance_id:
          $ref: '#/components/schemas/InstanceId'
          title: Person.instance_id
      required:
        - id
        - name
        - banned
        - published
        - actor_id
        - local
        - deleted
        - bot_account
        - instance_id
      additionalProperties: false
      title: Person
      type: object
    PersonAggregates:
      properties:
        person_id:
          $ref: '#/components/schemas/PersonId'
          title: PersonAggregates.person_id
        post_count:
          title: PersonAggregates.post_count
          type: integer
        comment_count:
          title: PersonAggregates.comment_count
          type: integer
      required:
        - person_id
        - post_count
        - comment_count
      additionalProperties: false
      title: PersonAggregates
      type: object
    PersonView:
      properties:
        person:
          $ref: '#/components/schemas/Person'
          title: PersonView.person
        counts:
          $ref: '#/components/schemas/PersonAggregates'
          title: PersonView.counts
        is_admin:
          title: PersonView.is_admin
          type: boolean
        activity_alert:
          title: PersonView.activity_alert
          type: boolean
      required:
        - person
        - counts
        - is_admin
        - activity_alert
      additionalProperties: false
      title: PersonView
      type: object
    LocalUserId:
      title: LocalUserId
      type: integer
    LocalUser:
      properties:
        show_nsfw:
          title: LocalUser.show_nsfw
          type: boolean
        default_sort_type:
          $ref: '#/components/schemas/SortType'
          title: LocalUser.default_sort_type
        default_listing_type:
          $ref: '#/components/schemas/ListingType'
          title: LocalUser.default_listing_type
        show_scores:
          title: LocalUser.show_scores
          type: boolean
        show_bot_accounts:
          title: LocalUser.show_bot_accounts
          type: boolean
        show_read_posts:
          title: LocalUser.show_read_posts
          type: boolean
      required:
        - show_nsfw
        - default_sort_type
        - default_listing_type
        - show_scores
        - show_bot_accounts
        - show_read_posts
      additionalProperties: false
      title: LocalUser
      type: object
    LocalUserView:
      properties:
        local_user:
          $ref: '#/components/schemas/LocalUser'
          title: LocalUserView.local_user
        person:
          $ref: '#/components/schemas/Person'
          title: LocalUserView.person
        counts:
          $ref: '#/components/schemas/PersonAggregates'
          title: LocalUserView.counts
      required:
        - local_user
        - person
        - counts
      additionalProperties: false
      title: LocalUserView
      type: object
    CommunityId:
      title: CommunityId
      type: integer
    Community:
      properties:
        id:
          $ref: '#/components/schemas/CommunityId'
          title: Community.id
        name:
          title: Community.name
          type: string
        title:
          title: Community.title
          type: string
        description:
          title: Community.description
          type: string
        removed:
          title: Community.removed
          type: boolean
        published:
          title: Community.published
          type: string
        updated:
          title: Community.updated
          type: string
        deleted:
          title: Community.deleted
          type: boolean
        nsfw:
          title: Community.nsfw
          type: boolean
        actor_id:
          title: Community.actor_id
          type: string
        local:
          title: Community.local
          type: boolean
        icon:
          title: Community.icon
          type: string
        banner:
          title: Community.banner
          type: string
        hidden:
          title: Community.hidden
          type: boolean
        restricted_to_mods:
          title: Community.restricted_to_mods
          type: boolean
        instance_id:
          $ref: '#/components/schemas/InstanceId'
          title: Community.instance_id
      required:
        - id
        - name
        - title
        - removed
        - published
        - deleted
        - nsfw
        - actor_id
        - local
        - hidden
        - restricted_to_mods
        - instance_id
      additionalProperties: false
      title: Community
      type: object
    CreateCommunity:
      properties:
        name:
          title: CreateCommunity.name
          type: string
        title:
          title: CreateCommunity.title
          type: string
        description:
          title: CreateCommunity.description
          type: string
        rules:
          title: CreateCommunity.rules
          type: string
        icon_url:
          title: CreateCommunity.icon
          type: string
        banner_url:
          title: CreateCommunity.banner
          type: string
        nsfw:
          title: CreateCommunity.nsfw
          type: boolean
        restricted_to_mods:
          title: CreateCommunity.restricted_to_mods
          type: boolean
        local_only:
          title: CreateCommunity.local_only
          type: boolean
        discussion_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: CreateCommunity.discussion_languages
          type: array
      required:
        - name
        - title
      additionalProperties: false
      title: CreateCommunity
      type: object
    EditCommunity:
      properties:
        id:
          title: CreateCommunity.id
          type: integer
        title:
          title: CreateCommunity.title
          type: string
        description:
          title: CreateCommunity.description
          type: string
        rules:
          title: CreateCommunity.rules
          type: string
        icon_url:
          title: CreateCommunity.icon
          type: string
        banner_url:
          title: CreateCommunity.banner
          type: string
        nsfw:
          title: CreateCommunity.nsfw
          type: boolean
        restricted_to_mods:
          title: CreateCommunity.restricted_to_mods
          type: boolean
        local_only:
          title: CreateCommunity.local_only
          type: boolean
        discussion_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: CreateCommunity.discussion_languages
          type: array
      required:
        - id
      additionalProperties: false
      title: CreateCommunity
      type: object
    CommunityFollowerView:
      properties:
        community:
          $ref: '#/components/schemas/Community'
          title: CommunityFollowerView.community
        follower:
          $ref: '#/components/schemas/Person'
          title: CommunityFollowerView.follower
      required:
        - community
        - follower
      additionalProperties: false
      title: CommunityFollowerView
      type: object
    CommunityModeratorView:
      properties:
        community:
          $ref: '#/components/schemas/Community'
          title: CommunityModeratorView.community
        moderator:
          $ref: '#/components/schemas/Person'
          title: CommunityModeratorView.moderator
      required:
        - community
        - moderator
      additionalProperties: false
      title: CommunityModeratorView
      type: object
    CommunityBlockView:
      properties:
        person:
          $ref: '#/components/schemas/Person'
          title: CommunityBlockView.person
        community:
          $ref: '#/components/schemas/Community'
          title: CommunityBlockView.community
      required:
        - person
        - community
      additionalProperties: false
      title: CommunityBlockView
      type: object
    Instance:
      properties:
        id:
          $ref: '#/components/schemas/InstanceId'
          title: Instance.id
        domain:
          title: Instance.domain
          type: string
        published:
          title: Instance.published
          type: string
        updated:
          title: Instance.updated
          type: string
        software:
          title: Instance.software
          type: string
        version:
          title: Instance.version
          type: string
      required:
        - id
        - domain
        - published
      additionalProperties: false
      title: Instance
      type: object
    InstanceBlockView:
      properties:
        person:
          $ref: '#/components/schemas/Person'
          title: InstanceBlockView.person
        instance:
          $ref: '#/components/schemas/Instance'
          title: InstanceBlockView.instance
        site:
          $ref: '#/components/schemas/Site'
          title: InstanceBlockView.site
      required:
        - person
        - instance
      additionalProperties: false
      title: InstanceBlockView
      type: object
    PersonBlockView:
      properties:
        person:
          $ref: '#/components/schemas/Person'
          title: PersonBlockView.person
        target:
          $ref: '#/components/schemas/Person'
          title: PersonBlockView.target
      required:
        - person
        - target
      additionalProperties: false
      title: PersonBlockView
      type: object
    LanguageId:
      title: LanguageId
      type: integer
    MyUserInfo:
      properties:
        local_user_view:
          $ref: '#/components/schemas/LocalUserView'
          title: MyUserInfo.local_user_view
        follows:
          items:
            $ref: '#/components/schemas/CommunityFollowerView'
          title: MyUserInfo.follows
          type: array
        moderates:
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
          title: MyUserInfo.moderates
          type: array
        community_blocks:
          items:
            $ref: '#/components/schemas/CommunityBlockView'
          title: MyUserInfo.community_blocks
          type: array
        instance_blocks:
          items:
            $ref: '#/components/schemas/InstanceBlockView'
          title: MyUserInfo.instance_blocks
          type: array
        person_blocks:
          items:
            $ref: '#/components/schemas/PersonBlockView'
          title: MyUserInfo.person_blocks
          type: array
        discussion_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: MyUserInfo.discussion_languages
          type: array
      required:
        - local_user_view
        - follows
        - moderates
        - community_blocks
        - instance_blocks
        - person_blocks
        - discussion_languages
      additionalProperties: false
      title: MyUserInfo
      type: object
    GetSiteResponse:
      properties:
        version:
          title: GetSiteResponse.version
          type: string
        my_user:
          $ref: '#/components/schemas/MyUserInfo'
          title: GetSiteResponse.my_user
        site:
          $ref: '#/components/schemas/Site'
          title: GetSiteResponse.site
      required:
        - version
      additionalProperties: false
      title: GetSiteResponse
      type: object
    PostId:
      title: PostId
      type: integer
    CommentId:
      title: CommentId
      type: integer
    Post:
      properties:
        id:
          $ref: '#/components/schemas/PostId'
          title: Post.id
        title:
          title: Post.title
          type: string
        url:
          title: Post.url
          type: string
        body:
          title: Post.body
          type: string
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: Post.creator_id
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: Post.community_id
        removed:
          title: Post.removed
          type: boolean
        locked:
          title: Post.locked
          type: boolean
        published:
          title: Post.published
          type: string
        updated:
          title: Post.updated
          type: string
        deleted:
          title: Post.deleted
          type: boolean
        nsfw:
          title: Post.nsfw
          type: boolean
        thumbnail_url:
          title: Post.thumbnail_url
          type: string
        ap_id:
          title: Post.ap_id
          type: string
        local:
          title: Post.local
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: Post.language_id
        sticky:
          title: Post.sticky
          type: boolean
        alt_text:
          title: Post.alt_text
          type: string
      required:
        - id
        - title
        - creator_id
        - community_id
        - removed
        - locked
        - published
        - deleted
        - nsfw
        - ap_id
        - local
        - language_id
        - sticky
      additionalProperties: false
      title: Post
      type: object
    Comment:
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
          title: Comment.id
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: Comment.creator_id
        post_id:
          $ref: '#/components/schemas/PostId'
          title: Comment.post_id
        content:
          title: Comment.content
          type: string
        removed:
          title: Comment.removed
          type: boolean
        published:
          title: Comment.published
          type: string
        updated:
          title: Comment.updated
          type: string
        deleted:
          title: Comment.deleted
          type: boolean
        ap_id:
          title: Comment.ap_id
          type: string
        local:
          title: Comment.local
          type: boolean
        path:
          title: Comment.path
          type: string
        distinguished:
          title: Comment.distinguished
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: Comment.language_id
      required:
        - id
        - creator_id
        - post_id
        - content
        - removed
        - published
        - deleted
        - ap_id
        - local
        - path
        - distinguished
        - language_id
      additionalProperties: false
      title: Comment
      type: object
    SearchType:
      enum:
        - Communities
        - Posts
        - Users
        - Url
      title: SearchType
      type: string
    Search:
      properties:
        q:
          title: Search.q
          type: string
        type_:
          $ref: '#/components/schemas/SearchType'
          title: Search.type_
        sort:
          $ref: '#/components/schemas/SortType'
          title: Search.sort
        listing_type:
          $ref: '#/components/schemas/ListingType'
          title: Search.listing_type
        page:
          title: Search.page
          type: integer
        limit:
          title: Search.limit
          type: integer
      required:
        - q
      additionalProperties: false
      title: Search
      type: object
    CommentAggregates:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: CommentAggregates.comment_id
        score:
          title: CommentAggregates.score
          type: integer
        upvotes:
          title: CommentAggregates.upvotes
          type: integer
        downvotes:
          title: CommentAggregates.downvotes
          type: integer
        published:
          title: CommentAggregates.published
          type: string
        child_count:
          title: CommentAggregates.child_count
          type: integer
      required:
        - comment_id
        - score
        - upvotes
        - downvotes
        - published
        - child_count
      additionalProperties: false
      title: CommentAggregates
      type: object
    SubscribedType:
      enum:
        - Subscribed
        - NotSubscribed
        - Pending
      title: SubscribedType
      type: string
    CommentView:
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
          title: CommentView.comment
        creator:
          $ref: '#/components/schemas/Person'
          title: CommentView.creator
        post:
          $ref: '#/components/schemas/Post'
          title: CommentView.post
        community:
          $ref: '#/components/schemas/Community'
          title: CommentView.community
        counts:
          $ref: '#/components/schemas/CommentAggregates'
          title: CommentView.counts
        creator_banned_from_community:
          title: CommentView.creator_banned_from_community
          type: boolean
        banned_from_community:
          title: CommentView.banned_from_community
          type: boolean
        creator_is_moderator:
          title: CommentView.creator_is_moderator
          type: boolean
        creator_is_admin:
          title: CommentView.creator_is_admin
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: CommentView.subscribed
        saved:
          title: CommentView.saved
          type: boolean
        activity_alert:
          title: CommentView.activity_alert
          type: boolean
        creator_blocked:
          title: CommentView.creator_blocked
          type: boolean
        my_vote:
          title: CommentView.my_vote
          type: integer
      required:
        - comment
        - creator
        - post
        - community
        - counts
        - creator_banned_from_community
        - banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - activity_alert
        - creator_blocked
      additionalProperties: false
      title: CommentView
      type: object
    PostAggregates:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: PostAggregates.post_id
        comments:
          title: PostAggregates.comments
          type: integer
        score:
          title: PostAggregates.score
          type: integer
        upvotes:
          title: PostAggregates.upvotes
          type: integer
        downvotes:
          title: PostAggregates.downvotes
          type: integer
        published:
          title: PostAggregates.published
          type: string
        newest_comment_time:
          title: PostAggregates.newest_comment_time
          type: string
      required:
        - post_id
        - comments
        - score
        - upvotes
        - downvotes
        - published
        - newest_comment_time
      additionalProperties: false
      title: PostAggregates
      type: object
    PostView:
      properties:
        post:
          $ref: '#/components/schemas/Post'
          title: PostView.post
        creator:
          $ref: '#/components/schemas/Person'
          title: PostView.creator
        community:
          $ref: '#/components/schemas/Community'
          title: PostView.community
        creator_banned_from_community:
          title: PostView.creator_banned_from_community
          type: boolean
        banned_from_community:
          title: PostView.banned_from_community
          type: boolean
        creator_is_moderator:
          title: PostView.creator_is_moderator
          type: boolean
        creator_is_admin:
          title: PostView.creator_is_admin
          type: boolean
        counts:
          $ref: '#/components/schemas/PostAggregates'
          title: PostView.counts
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: PostView.subscribed
        saved:
          title: PostView.saved
          type: boolean
        activity_alert:
          title: PostView.activity_alert
          type: boolean
        read:
          title: PostView.read
          type: boolean
        hidden:
          title: PostView.hidden
          type: boolean
        creator_blocked:
          title: PostView.creator_blocked
          type: boolean
        my_vote:
          title: PostView.my_vote
          type: integer
        unread_comments:
          title: PostView.unread_comments
          type: integer
      required:
        - post
        - creator
        - community
        - creator_banned_from_community
        - banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - counts
        - subscribed
        - saved
        - activityalert
        - read
        - hidden
        - creator_blocked
        - unread_comments
      additionalProperties: false
      title: PostView
      type: object
    CommunityAggregates:
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: CommunityAggregates.community_id
        subscriptions_count:
          title: CommunityAggregates.subscriptions_count
          type: integer
        post_count:
          title: CommunityAggregates.post_count
          type: integer
        post_reply_count:
          title: CommunityAggregates.post_reply_count
          type: integer
        published:
          title: CommunityAggregates.published
          type: string
      required:
        - community_id
        - subscriptions_count
        - post_count
        - post_reply_count
        - published
      additionalProperties: false
      title: CommunityAggregates
      type: object
    CommunityView:
      properties:
        community:
          $ref: '#/components/schemas/Community'
          title: CommunityView.community
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: CommunityView.subscribed
        blocked:
          title: CommunityView.blocked
          type: boolean
        counts:
          $ref: '#/components/schemas/CommunityAggregates'
          title: CommunityView.counts
        banned_from_community:
          title: CommunityView.banned_from_community
          type: boolean
        activity_alert:
          title: CommunityView.activity_alert
          type: boolean
      required:
        - community
        - subscribed
        - blocked
        - counts
        - banned_from_community
        - activity_alert
      additionalProperties: false
      title: CommunityView
      type: object
    SearchResponse:
      properties:
        type_:
          $ref: '#/components/schemas/SearchType'
          title: SearchResponse.type_
        posts:
          items:
            $ref: '#/components/schemas/PostView'
          title: SearchResponse.posts
          type: array
        communities:
          items:
            $ref: '#/components/schemas/CommunityView'
          title: SearchResponse.communities
          type: array
        users:
          items:
            $ref: '#/components/schemas/PersonView'
          title: SearchResponse.users
          type: array
      required:
        - type_
        - comments
        - posts
        - communities
        - users
      additionalProperties: false
      title: SearchResponse
      type: object
    GetCommunity:
      properties:
        id:
          $ref: '#/components/schemas/CommunityId'
          title: GetCommunity.id
        name:
          title: GetCommunity.name
          type: string
      additionalProperties: false
      title: GetCommunity
      type: object
    GetCommunityResponse:
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
          title: GetCommunityResponse.community_view
        site:
          $ref: '#/components/schemas/Site'
          title: GetCommunityResponse.site
        moderators:
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
          title: GetCommunityResponse.moderators
          type: array
        discussion_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: GetCommunityResponse.discussion_languages
          type: array
      required:
        - community_view
        - moderators
        - discussion_languages
      additionalProperties: false
      title: GetCommunityResponse
      type: object
    CommunityResponse:
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
          title: CommunityResponse.community_view
        discussion_languages:
          items:
            $ref: '#/components/schemas/LanguageId'
          title: CommunityResponse.discussion_languages
          type: array
      required:
        - community_view
        - discussion_languages
      additionalProperties: false
      title: CommunityResponse
      type: object
    ListCommunities:
      properties:
        type_:
          $ref: '#/components/schemas/ListingType'
          title: ListCommunities.type_
        sort:
          $ref: '#/components/schemas/CommunitySortType'
          title: ListCommunities.sort
        show_nsfw:
          title: ListCommunities.show_nsfw
          type: boolean
        page:
          title: ListCommunities.page
          type: integer
        limit:
          title: ListCommunities.limit
          type: integer
      additionalProperties: false
      title: ListCommunities
      type: object
    ListCommunitiesResponse:
      properties:
        communities:
          items:
            $ref: '#/components/schemas/CommunityView'
          title: ListCommunitiesResponse.communities
          type: array
      required:
        - communities
      additionalProperties: false
      title: ListCommunitiesResponse
      type: object
    FollowCommunity:
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: FollowCommunity.community_id
        follow:
          title: FollowCommunity.follow
          type: boolean
      required:
        - community_id
        - follow
      additionalProperties: false
      title: FollowCommunity
      type: object
    BlockCommunity:
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: BlockCommunity.community_id
        block:
          title: BlockCommunity.block
          type: boolean
      required:
        - community_id
        - block
      additionalProperties: false
      title: BlockCommunity
      type: object
    BlockCommunityResponse:
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
          title: BlockCommunityResponse.community_view
        blocked:
          title: BlockCommunityResponse.blocked
          type: boolean
      required:
        - community_view
        - blocked
      additionalProperties: false
      title: BlockCommunityResponse
      type: object
    DeleteCommunity:
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: DeleteCommunity.community_id
        deleted:
          title: DeleteCommunity.deleted
          type: boolean
      required:
        - community_id
        - deleted
      additionalProperties: false
      title: DeleteCommunity
      type: object
    GetPost:
      properties:
        id:
          $ref: '#/components/schemas/PostId'
          title: GetPost.id
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: GetPost.comment_id
      additionalProperties: false
      title: GetPost
      type: object
    GetPostResponse:
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'
          title: GetPostResponse.post_view
        community_view:
          $ref: '#/components/schemas/CommunityView'
          title: GetPostResponse.community_view
        moderators:
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
          title: GetPostResponse.moderators
          type: array
        cross_posts:
          items:
            $ref: '#/components/schemas/PostView'
          title: GetPostResponse.cross_posts
          type: array
      required:
        - post_view
        - community_view
        - moderators
        - cross_posts
      additionalProperties: false
      title: GetPostResponse
      type: object
    SubscribeCommunity:
      properties:
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: SubscribeCommunity.community_id
        subscribe:
          title: SubscribeCommunity.subscribe
          type: boolean
      required:
        - community_id
        - subscribe
      additionalProperties: false
      title: SubscribeCommunity
      type: object
    EditPost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: EditPost.post_id
        title:
          title: EditPost.title
          type: string
        url:
          title: EditPost.url
          type: string
        body:
          title: EditPost.body
          type: string
        nsfw:
          title: EditPost.nsfw
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: EditPost.language_id
      required:
        - post_id
      additionalProperties: false
      title: EditPost
      type: object
    PostResponse:
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'
          title: PostResponse.post_view
      required:
        - post_view
      additionalProperties: false
      title: PostResponse
      type: object
    CreatePost:
      properties:
        title:
          title: CreatePost.title
          type: string
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: CreatePost.community_id
        url:
          title: CreatePost.url
          type: string
        body:
          title: CreatePost.body
          type: string
        nsfw:
          title: CreatePost.nsfw
          type: boolean
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: CreatePost.language_id
      required:
        - title
        - community_id
      additionalProperties: false
      title: CreatePost
      type: object
    GetPosts:
      properties:
        type_:
          $ref: '#/components/schemas/ListingType'
          title: GetPosts.type_
        sort:
          $ref: '#/components/schemas/SortType'
          title: GetPosts.sort
        page:
          title: GetPosts.page
          type: integer
        limit:
          title: GetPosts.limit
          type: integer
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: GetPosts.community_id
        person_id:
          $ref: '#/components/schemas/PersonId'
          title: GetPosts.person_id
        community_name:
          title: GetPosts.community_name
          type: string
        liked_only:
          title: GetPosts.liked_only
          type: boolean
      additionalProperties: false
      title: GetPosts
      type: object
    GetPostsResponse:
      properties:
        posts:
          items:
            $ref: '#/components/schemas/PostView'
          title: GetPostsResponse.posts
          type: array
      required:
        - posts
      additionalProperties: false
      title: GetPostsResponse
      type: object
    DeletePost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: DeletePost.post_id
        deleted:
          title: DeletePost.deleted
          type: boolean
      required:
        - post_id
        - deleted
      additionalProperties: false
      title: DeletePost
      type: object
    RemovePost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: RemovePost.post_id
        removed:
          title: RemovePost.removed
          type: boolean
        reason:
          title: RemovePost.reason
          type: string
      required:
        - post_id
        - removed
      additionalProperties: false
      title: RemovePost
      type: object
    LockPost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: LockPost.post_id
        locked:
          title: LockPost.locked
          type: boolean
      required:
        - post_id
        - locked
      additionalProperties: false
      title: LockPost
      type: object
    PostFeatureType:
      enum:
        - Local
        - Community
      title: PostFeatureType
      type: string
    FeaturePost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: FeaturePost.post_id
        featured:
          title: FeaturePost.featured
          type: boolean
        feature_type:
          $ref: '#/components/schemas/PostFeatureType'
          title: FeaturePost.feature_type
      required:
        - post_id
        - featured
        - feature_type
      additionalProperties: false
      title: FeaturePost
      type: object
    CreatePostLike:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: CreatePostLike.post_id
        score:
          title: CreatePostLike.score
          type: integer
      required:
        - post_id
        - score
      additionalProperties: false
      title: CreatePostLike
      type: object
    SavePost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: SavePost.post_id
        save:
          title: SavePost.save
          type: boolean
      required:
        - post_id
        - save
      additionalProperties: false
      title: SavePost
      type: object
    SubscribePost:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: SubscribePost.post_id
        subscribe:
          title: SubscribePost.subscribe
          type: boolean
      required:
        - post_id
        - subscribe
      additionalProperties: false
      title: SubscribePost
      type: object
    CreatePostReport:
      properties:
        post_id:
          $ref: '#/components/schemas/PostId'
          title: CreatePostReport.post_id
        reason:
          title: CreatePostReport.reason
          type: string
      required:
        - post_id
        - reason
      additionalProperties: false
      title: CreatePostReport
      type: object
    PostReportId:
      title: PostReportId
      type: integer
    PostReport:
      properties:
        id:
          $ref: '#/components/schemas/PostReportId'
          title: PostReport.id
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: PostReport.creator_id
        post_id:
          $ref: '#/components/schemas/PostId'
          title: PostReport.post_id
        original_post_name:
          title: PostReport.original_post_name
          type: string
        original_post_url:
          title: PostReport.original_post_url
          type: string
        original_post_body:
          title: PostReport.original_post_body
          type: string
        reason:
          title: PostReport.reason
          type: string
        resolved:
          title: PostReport.resolved
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonId'
          title: PostReport.resolver_id
        published:
          title: PostReport.published
          type: string
        updated:
          title: PostReport.updated
          type: string
      required:
        - id
        - creator_id
        - post_id
        - original_post_name
        - reason
        - resolved
        - published
      additionalProperties: false
      title: PostReport
      type: object
    PostReportView:
      properties:
        post_report:
          $ref: '#/components/schemas/PostReport'
          title: PostReportView.post_report
        post:
          $ref: '#/components/schemas/Post'
          title: PostReportView.post
        community:
          $ref: '#/components/schemas/Community'
          title: PostReportView.community
        creator:
          $ref: '#/components/schemas/Person'
          title: PostReportView.creator
        post_creator:
          $ref: '#/components/schemas/Person'
          title: PostReportView.post_creator
        creator_banned_from_community:
          title: PostReportView.creator_banned_from_community
          type: boolean
        creator_is_moderator:
          title: PostReportView.creator_is_moderator
          type: boolean
        creator_is_admin:
          title: PostReportView.creator_is_admin
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: PostReportView.subscribed
        saved:
          title: PostReportView.saved
          type: boolean
        read:
          title: PostReportView.read
          type: boolean
        hidden:
          title: PostReportView.hidden
          type: boolean
        creator_blocked:
          title: PostReportView.creator_blocked
          type: boolean
        my_vote:
          title: PostReportView.my_vote
          type: integer
        unread_comments:
          title: PostReportView.unread_comments
          type: integer
        counts:
          $ref: '#/components/schemas/PostAggregates'
          title: PostReportView.counts
        resolver:
          $ref: '#/components/schemas/Person'
          title: PostReportView.resolver
      required:
        - post_report
        - post
        - community
        - creator
        - post_creator
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - read
        - hidden
        - creator_blocked
        - unread_comments
        - counts
      additionalProperties: false
      title: PostReportView
      type: object
    PostReportResponse:
      properties:
        post_report_view:
          $ref: '#/components/schemas/PostReportView'
          title: PostReportResponse.post_report_view
      required:
        - post_report_view
      additionalProperties: false
      title: PostReportResponse
      type: object
    CommentResponse:
      properties:
        comment_view:
          $ref: '#/components/schemas/CommentView'
          title: CommentResponse.comment_view
      required:
        - comment_view
      additionalProperties: false
      title: CommentResponse
      type: object
    EditComment:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: EditComment.comment_id
        content:
          title: EditComment.content
          type: string
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: EditComment.language_id
      required:
        - comment_id
      additionalProperties: false
      title: EditComment
      type: object
    CreateComment:
      properties:
        content:
          title: CreateComment.content
          type: string
        post_id:
          $ref: '#/components/schemas/PostId'
          title: CreateComment.post_id
        parent_id:
          $ref: '#/components/schemas/CommentId'
          title: CreateComment.parent_id
        language_id:
          $ref: '#/components/schemas/LanguageId'
          title: CreateComment.language_id
      required:
        - content
        - post_id
      additionalProperties: false
      title: CreateComment
      type: object
    CommentSortType:
      enum:
        - Hot
        - Top
        - New
        - Old
        - Controversial
      title: CommentSortType
      type: string
    GetComment:
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
          title: GetComment.id
      required:
        - id
      additionalProperties: false
      title: GetComment
      type: object
    GetComments:
      properties:
        type_:
          $ref: '#/components/schemas/ListingType'
          title: GetComments.type_
        sort:
          $ref: '#/components/schemas/CommentSortType'
          title: GetComments.sort
        max_depth:
          title: GetComments.max_depth
          type: integer
        page:
          title: GetComments.page
          type: integer
        limit:
          title: GetComments.limit
          type: integer
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: GetComments.community_id
        community_name:
          title: GetComments.community_name
          type: string
        post_id:
          $ref: '#/components/schemas/PostId'
          title: GetComments.post_id
        parent_id:
          $ref: '#/components/schemas/CommentId'
          title: GetComments.parent_id
        saved_only:
          title: GetComments.saved_only
          type: boolean
        liked_only:
          title: GetComments.liked_only
          type: boolean
        disliked_only:
          title: GetComments.disliked_only
          type: boolean
      additionalProperties: false
      title: GetComments
      type: object
    GetCommentsResponse:
      properties:
        comments:
          items:
            $ref: '#/components/schemas/CommentView'
          title: GetCommentsResponse.comments
          type: array
      required:
        - comments
      additionalProperties: false
      title: GetCommentsResponse
      type: object
    DeleteComment:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: DeleteComment.comment_id
        deleted:
          title: DeleteComment.deleted
          type: boolean
      required:
        - comment_id
        - deleted
      additionalProperties: false
      title: DeleteComment
      type: object
    RemoveComment:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: RemoveComment.comment_id
        removed:
          title: RemoveComment.removed
          type: boolean
        reason:
          title: RemoveComment.reason
          type: string
      required:
        - comment_id
        - removed
      additionalProperties: false
      title: RemoveComment
      type: object
    CommentReplyId:
      title: CommentReplyId
      type: integer
    CommentReply:
      properties:
        id:
          $ref: '#/components/schemas/CommentReplyId'
          title: CommentReply.id
        recipient_id:
          $ref: '#/components/schemas/PersonId'
          title: CommentReply.recipient_id
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: CommentReply.comment_id
        read:
          title: CommentReply.read
          type: boolean
        published:
          title: CommentReply.published
          type: string
      required:
        - id
        - recipient_id
        - comment_id
        - read
        - published
      additionalProperties: false
      title: CommentReply
      type: object
    CommentReplyView:
      properties:
        comment_reply:
          $ref: '#/components/schemas/CommentReply'
          title: CommentReplyView.comment_reply
        comment:
          $ref: '#/components/schemas/Comment'
          title: CommentReplyView.comment
        creator:
          $ref: '#/components/schemas/Person'
          title: CommentReplyView.creator
        post:
          $ref: '#/components/schemas/Post'
          title: CommentReplyView.post
        community:
          $ref: '#/components/schemas/Community'
          title: CommentReplyView.community
        recipient:
          $ref: '#/components/schemas/Person'
          title: CommentReplyView.recipient
        counts:
          $ref: '#/components/schemas/CommentAggregates'
          title: CommentReplyView.counts
        creator_banned_from_community:
          title: CommentReplyView.creator_banned_from_community
          type: boolean
        banned_from_community:
          title: CommentReplyView.banned_from_community
          type: boolean
        creator_is_moderator:
          title: CommentReplyView.creator_is_moderator
          type: boolean
        creator_is_admin:
          title: CommentReplyView.creator_is_admin
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: CommentReplyView.subscribed
        saved:
          title: CommentReplyView.saved
          type: boolean
        creator_blocked:
          title: CommentReplyView.creator_blocked
          type: boolean
        my_vote:
          title: CommentReplyView.my_vote
          type: integer
      required:
        - comment_reply
        - comment
        - creator
        - post
        - community
        - recipient
        - counts
        - creator_banned_from_community
        - banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - subscribed
        - saved
        - creator_blocked
      additionalProperties: false
      title: CommentReplyView
      type: object
    CreateCommentLike:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: CreateCommentLike.comment_id
        score:
          title: CreateCommentLike.score
          type: integer
      required:
        - comment_id
        - score
      additionalProperties: false
      title: CreateCommentLike
      type: object
    SaveComment:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: SaveComment.comment_id
        save:
          title: SaveComment.save
          type: boolean
      required:
        - comment_id
        - save
      additionalProperties: false
      title: SaveComment
      type: object
    SubscribeComment:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: SubscribeComment.comment_id
        subscribe:
          title: SubscribeComment.subscribe
          type: boolean
      required:
        - comment_id
        - subscribe
      additionalProperties: false
      title: SaveComment
      type: object
    CreateCommentReport:
      properties:
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: CreateCommentReport.comment_id
        reason:
          title: CreateCommentReport.reason
          type: string
      required:
        - comment_id
        - reason
      additionalProperties: false
      title: CreateCommentReport
      type: object
    CommentReportId:
      title: CommentReportId
      type: integer
    CommentReport:
      properties:
        id:
          $ref: '#/components/schemas/CommentReportId'
          title: CommentReport.id
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: CommentReport.creator_id
        comment_id:
          $ref: '#/components/schemas/CommentId'
          title: CommentReport.comment_id
        original_comment_text:
          title: CommentReport.original_comment_text
          type: string
        reason:
          title: CommentReport.reason
          type: string
        resolved:
          title: CommentReport.resolved
          type: boolean
        resolver_id:
          $ref: '#/components/schemas/PersonId'
          title: CommentReport.resolver_id
        published:
          title: CommentReport.published
          type: string
        updated:
          title: CommentReport.updated
          type: string
      required:
        - id
        - creator_id
        - comment_id
        - original_comment_text
        - reason
        - resolved
        - published
      additionalProperties: false
      title: CommentReport
      type: object
    CommentReportView:
      properties:
        comment_report:
          $ref: '#/components/schemas/CommentReport'
          title: CommentReportView.comment_report
        comment:
          $ref: '#/components/schemas/Comment'
          title: CommentReportView.comment
        post:
          $ref: '#/components/schemas/Post'
          title: CommentReportView.post
        community:
          $ref: '#/components/schemas/Community'
          title: CommentReportView.community
        creator:
          $ref: '#/components/schemas/Person'
          title: CommentReportView.creator
        comment_creator:
          $ref: '#/components/schemas/Person'
          title: CommentReportView.comment_creator
        counts:
          $ref: '#/components/schemas/CommentAggregates'
          title: CommentReportView.counts
        creator_banned_from_community:
          title: CommentReportView.creator_banned_from_community
          type: boolean
        creator_is_moderator:
          title: CommentReportView.creator_is_moderator
          type: boolean
        creator_is_admin:
          title: CommentReportView.creator_is_admin
          type: boolean
        creator_blocked:
          title: CommentReportView.creator_blocked
          type: boolean
        subscribed:
          $ref: '#/components/schemas/SubscribedType'
          title: CommentReportView.subscribed
        saved:
          title: CommentReportView.saved
          type: boolean
        my_vote:
          title: CommentReportView.my_vote
          type: integer
        resolver:
          $ref: '#/components/schemas/Person'
          title: CommentReportView.resolver
      required:
        - comment_report
        - comment
        - post
        - community
        - creator
        - comment_creator
        - counts
        - creator_banned_from_community
        - creator_is_moderator
        - creator_is_admin
        - creator_blocked
        - subscribed
        - saved
      additionalProperties: false
      title: CommentReportView
      type: object
    CommentReportResponse:
      properties:
        comment_report_view:
          $ref: '#/components/schemas/CommentReportView'
          title: CommentReportResponse.comment_report_view
      required:
        - comment_report_view
      additionalProperties: false
      title: CommentReportResponse
      type: object
    PrivateMessageId:
      title: PrivateMessageId
      type: integer
    PrivateMessage:
      properties:
        id:
          $ref: '#/components/schemas/PrivateMessageId'
          title: PrivateMessage.id
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: PrivateMessage.creator_id
        recipient_id:
          $ref: '#/components/schemas/PersonId'
          title: PrivateMessage.recipient_id
        content:
          title: PrivateMessage.content
          type: string
        deleted:
          title: PrivateMessage.deleted
          type: boolean
        read:
          title: PrivateMessage.read
          type: boolean
        published:
          title: PrivateMessage.published
          type: string
        updated:
          title: PrivateMessage.updated
          type: string
        ap_id:
          title: PrivateMessage.ap_id
          type: string
        local:
          title: PrivateMessage.local
          type: boolean
      required:
        - id
        - creator_id
        - recipient_id
        - content
        - deleted
        - read
        - published
        - ap_id
        - local
      additionalProperties: false
      title: PrivateMessage
      type: object
    PrivateMessageView:
      properties:
        private_message:
          $ref: '#/components/schemas/PrivateMessage'
          title: PrivateMessageView.private_message
        creator:
          $ref: '#/components/schemas/Person'
          title: PrivateMessageView.creator
        recipient:
          $ref: '#/components/schemas/Person'
          title: PrivateMessageView.recipient
      required:
        - private_message
        - creator
        - recipient
      additionalProperties: false
      title: PrivateMessageView
      type: object
    GetPrivateMessages:
      properties:
        unread_only:
          title: GetPrivateMessages.unread_only
          type: boolean
        page:
          title: GetPrivateMessages.page
          type: integer
        limit:
          title: GetPrivateMessages.limit
          type: integer
        creator_id:
          $ref: '#/components/schemas/PersonId'
          title: GetPrivateMessages.creator_id
      additionalProperties: false
      title: GetPrivateMessages
      type: object
    PrivateMessagesResponse:
      properties:
        private_messages:
          items:
            $ref: '#/components/schemas/PrivateMessageView'
          title: PrivateMessagesResponse.private_messages
          type: array
      required:
        - private_messages
      additionalProperties: false
      title: PrivateMessagesResponse
      type: object
    GetPersonDetails:
      properties:
        person_id:
          $ref: '#/components/schemas/PersonId'
          title: GetPersonDetails.person_id
        username:
          title: GetPersonDetails.username
          type: string
        sort:
          $ref: '#/components/schemas/SortType'
          title: GetPersonDetails.sort
        page:
          title: GetPersonDetails.page
          type: integer
        limit:
          title: GetPersonDetails.limit
          type: integer
        community_id:
          $ref: '#/components/schemas/CommunityId'
          title: GetPersonDetails.community_id
        saved_only:
          title: GetPersonDetails.saved_only
          type: boolean
      additionalProperties: false
      title: GetPersonDetails
      type: object
    GetPersonDetailsResponse:
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
          title: GetPersonDetailsResponse.person_view
        site:
          $ref: '#/components/schemas/Site'
          title: GetPersonDetailsResponse.site
        comments:
          items:
            $ref: '#/components/schemas/CommentView'
          title: GetPersonDetailsResponse.comments
          type: array
        posts:
          items:
            $ref: '#/components/schemas/PostView'
          title: GetPersonDetailsResponse.posts
          type: array
        moderates:
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
          title: GetPersonDetailsResponse.moderates
          type: array
      required:
        - person_view
        - comments
        - posts
        - moderates
      additionalProperties: false
      title: GetPersonDetailsResponse
      type: object
    PersonResponse:
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
          title: PersonResponse.person_view
      required:
        - person_view
      additionalProperties: false
      title: PersonResponse
      type: object
    LoginResponse:
      properties:
        jwt:
          title: LoginResponse.jwt
          type: string
      additionalProperties: false
      title: LoginResponse
      type: object
    GetReplies:
      properties:
        sort:
          $ref: '#/components/schemas/CommentSortType'
          title: GetReplies.sort
        page:
          title: GetReplies.page
          type: integer
        limit:
          title: GetReplies.limit
          type: integer
        unread_only:
          title: GetReplies.unread_only
          type: boolean
      additionalProperties: false
      title: GetReplies
      type: object
    GetRepliesResponse:
      properties:
        replies:
          items:
            $ref: '#/components/schemas/CommentReplyView'
          title: GetRepliesResponse.replies
          type: array
      required:
        - replies
      additionalProperties: false
      title: GetRepliesResponse
      type: object
    BlockPerson:
      properties:
        person_id:
          $ref: '#/components/schemas/PersonId'
          title: BlockPerson.person_id
        block:
          title: BlockPerson.block
          type: boolean
      required:
        - person_id
        - block
      additionalProperties: false
      title: BlockPerson
      type: object
    BlockPersonResponse:
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
          title: BlockPersonResponse.person_view
        blocked:
          title: BlockPersonResponse.blocked
          type: boolean
      required:
        - person_view
        - blocked
      additionalProperties: false
      title: BlockPersonResponse
      type: object
    Login:
      properties:
        username:
          title: Login.username
          type: string
        password:
          title: Login.password
          type: string
      required:
        - username
        - password
      additionalProperties: false
      title: Login
      type: object
    GetUnreadCountResponse:
      properties:
        replies:
          title: GetUnreadCountResponse.replies
          type: integer
        mentions:
          title: GetUnreadCountResponse.mentions
          type: integer
        private_messages:
          title: GetUnreadCountResponse.private_messages
          type: integer
      required:
        - replies
        - mentions
        - private_messages
      additionalProperties: false
      title: GetUnreadCountResponse
      type: object
    SaveUserSettings:
      properties:
        show_nsfw:
          title: SaveUserSettings.show_nsfw
          type: boolean
        show_read_posts:
          title: SaveUserSettings.show_read_posts
          type: boolean
        bio:
          title: SaveUserSettings.bio
          type: string
    BlockInstance:
      properties:
        instance_id:
          $ref: '#/components/schemas/InstanceId'
          title: BlockInstance.instance_id
        block:
          title: BlockInstance.block
          type: boolean
      required:
        - instance_id
        - block
      additionalProperties: false
      title: BlockInstance
      type: object
    BlockInstanceResponse:
      properties:
        blocked:
          title: BlockInstanceResponse.blocked
          type: boolean
      required:
        - blocked
      additionalProperties: false
      title: BlockInstanceResponse
      type: object
    SubscribePerson:
      properties:
        person_id:
          $ref: '#/components/schemas/PersonId'
          title: SubscribePerson.person_id
        subscribe:
          title: SubscribePerson.subscribe
          type: boolean
      required:
        - person_id
        - subscribe
      additionalProperties: false
      title: SubscribePerson
      type: object
    ImageUpload:
      required:
        - file
      properties:
        file:
          type: string
          format: binary
      type: object
    BadRequest:
      required:
        - error
      properties:
        error:
          type: string
          example: An error occurred
      type: object
    UploadResponse:
      required:
        - url
      properties:
        url:
          type: string
          example: https://preferred.social/static/media/image.png
      type: object
    GetNotificationStatus:
      properties:
        status:
          title: GetNotificationStatus.status
          type: string
          enum: 
            - All
            - New
            - Read
        page:
          title: GetNotificationStatus.page
          type: integer
          default: 1
      required:
        - status
      additionalProperties: false
      title: GetNotificationStatus
      type: object
    EditNotificationState:
      properties:
        notif_id:
          title: GetNotificationStatus.notif_id
          type: integer
        read_state:
          title: GetNotificationStatus.read_state
          type: boolean
      required:
        - notif_id, read_state
      additionalProperties: false
      title: EditNotificationState
      type: object
    NotificationsResponse:
      properties:
        counts:
          title: NotificationsResponse.counts
          type: object
          $ref: '#/components/schemas/NotificationsCountsView' 
        items:
          title: NotificationsResponse.items
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/NotificationsItemUserView'
            - $ref: '#/components/schemas/NotificationsItemCommunityView'
            - $ref: '#/components/schemas/NotificationsItemTopicView'
            - $ref: '#/components/schemas/NotificationsItemPostView'
            - $ref: '#/components/schemas/NotificationsItemReplyView'
            - $ref: '#/components/schemas/NotificationsItemFeedView'
            - $ref: '#/components/schemas/NotificationsItemPostMentionView'
            - $ref: '#/components/schemas/NotificationsItemCommentMentionView' 
        status:
          title: NotificationsResponse.status
          type: string
          example: New
        user:
          title: NotificationsResponse.user
          type: string
          example: MyPieFedUserName
      required:
        - counts
        - items
        - status
        - user
      title: NotificationsResponse
      type: object
    NotificationsCountsView:
      properties:
        new_notifications:
          title: NotificationsCountsView.new_notifications
          type: integer
        read_notifications:
          title: NotificationsCountsView.read_notifications
          type: integer
        total_notifications:
          title: NotificationsCountsView.total_notifications
          type: integer
      required:
        - new_notifications
        - read_notifications
        - all_notifications
      title: NotificationsCountsView
      type: object
    NotificationsItemUserView:
      properties:
        notif_id:
          title: NotificationsItemUserView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemUserView.notif_type
          type: integer
          example: 0
        notif_subtype:
          title: NotificationsItemUserView.notif_subtype
          type: string
          example: new_post_from_followed_user
        author:
          title: NotificationsItemUserView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemUserView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemUserView.post_id
          type: integer
          example: 1234
        notif_body:
          title: NotificationsItemUserView.notif_body
          type: string
          example: "This is the body of a post."
      title: NotificationsItemUserView
      type: object
    NotificationsItemCommunityView:
      properties:
        notif_id:
          title: NotificationsItemCommunityView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemCommunityView.notif_type
          type: integer
          example: 1
        notif_subtype:
          title: NotificationsItemCommunityView.notif_subtype
          type: string
          example: new_post_in_followed_community
        author:
          title: NotificationsItemCommunityView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemCommunityView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemCommunityView.post_id
          type: integer
          example: 1234
        community:
          title: NotificationsItemCommunityView.community
          type: object
          $ref: '#/components/schemas/CommunityView'
        notif_body:
          title: NotificationsItemCommunityView.notif_body
          type: string
          example: "This is the body of a post."
      title: NotificationsItemCommunityView
      type: object
    NotificationsItemTopicView:
      properties:
        notif_id:
          title: NotificationsItemTopicView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemTopicView.notif_type
          type: integer
          example: 2
        notif_subtype:
          title: NotificationsItemTopicView.notif_subtype
          type: string
          example: new_post_in_followed_topic
        author:
          title: NotificationsItemTopicView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemTopicView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemTopicView.post_id
          type: integer
          example: 1234
        notif_body:
          title: NotificationsItemTopicView.notif_body
          type: string
          example: "This is the body of a post."
      title: NotificationsItemTopicView
      type: object
    NotificationsItemPostView:
      properties:
        notif_id:
          title: NotificationsItemPostView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemPostView.notif_type
          type: integer
          example: 3
        notif_subtype:
          title: NotificationsItemPostView.notif_subtype
          type: string
          example: top_level_comment_on_followed_post
        author:
          title: NotificationsItemPostView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemPostView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemPostView.post_id
          type: integer
          example: 1234
        comment:
          title: NotificationsItemPostView.comment
          type: object
          $ref: '#/components/schemas/Comment'
        comment_id:
          title: NotificationsItemPostView.comment_id
          type: integer
          example: 1234          
        notif_body:
          title: NotificationsItemPostView.notif_body
          type: string
          example: "This is the body of a comment."
      title: NotificationsItemPostView
      type: object
    NotificationsItemReplyView:
      properties:
        notif_id:
          title: NotificationsItemReplyView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemReplyView.notif_type
          type: integer
          example: 4
        notif_subtype:
          title: NotificationsItemReplyView.notif_subtype
          type: string
          example: new_reply_on_followed_comment
        author:
          title: NotificationsItemReplyView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemReplyView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemReplyView.post_id
          type: integer
          example: 1234
        comment:
          title: NotificationsItemReplyView.comment
          type: object
          $ref: '#/components/schemas/Comment'
        comment_id:
          title: NotificationsItemReplyView.comment_id
          type: integer
          example: 1234          
        notif_body:
          title: NotificationsItemReplyView.notif_body
          type: string
          example: "This is the body of a comment."
      title: NotificationsItemReplyView
      type: object
    NotificationsItemFeedView:
      properties:
        notif_id:
          title: NotificationsItemFeedView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemFeedView.notif_type
          type: integer
          example: 5
        notif_subtype:
          title: NotificationsItemFeedView.notif_subtype
          type: string
          example: new_post_in_followed_feed
        author:
          title: NotificationsItemFeedView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemFeedView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemFeedView.post_id
          type: integer
          example: 1234
        notif_body:
          title: NotificationsItemFeedView.notif_body
          type: string
          example: "This is the body of a post."
      title: NotificationsItemFeedView
      type: object
    NotificationsItemPostMentionView:
      properties:
        notif_id:
          title: NotificationsItemPostMentionView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemPostMentionView.notif_type
          type: integer
          example: 6
        notif_subtype:
          title: NotificationsItemPostMentionView.notif_subtype
          type: string
          example: post_mention
        author:
          title: NotificationsItemPostMentionView.author
          type: object
          $ref: '#/components/schemas/Person'
        post:
          title: NotificationsItemPostMentionView.post
          type: object
          $ref: '#/components/schemas/PostView'
        post_id:
          title: NotificationsItemPostMentionView.post_id
          type: integer
          example: 1234
        notif_body:
          title: NotificationsItemPostMentionView.notif_body
          type: string
          example: "This is the body of a post."
      title: NotificationsItemPostMentionView
      type: object
    NotificationsItemCommentMentionView:
      properties:
        notif_id:
          title: NotificationsItemCommentMentionView.notif_id
          type: integer
          example: 1234
        notif_type:
          title: NotificationsItemCommentMentionView.notif_type
          type: integer
          example: 6
        notif_subtype:
          title: NotificationsItemCommentMentionView.notif_subtype
          type: string
          example: comment_mention
        author:
          title: NotificationsItemCommentMentionView.author
          type: object
          $ref: '#/components/schemas/Person'
        comment:
          title: NotificationsItemCommentMentionView.comment
          type: object
          $ref: '#/components/schemas/Comment'
        comment_id:
          title: NotificationsItemCommentMentionView.comment_id
          type: integer
          example: 1234    
        notif_body:
          title: NotificationsItemCommentMentionView.notif_body
          type: string
          example: "This is the body of a comment."
      title: NotificationsItemCommentMentionView
      type: object
    NotificationsReadStatusResponse:
      title: NotificationsReadStatusResponse
      type: object
      oneOf:
        - $ref: '#/components/schemas/NotificationsItemUserView'
        - $ref: '#/components/schemas/NotificationsItemCommunityView'
        - $ref: '#/components/schemas/NotificationsItemTopicView'
        - $ref: '#/components/schemas/NotificationsItemPostView'
        - $ref: '#/components/schemas/NotificationsItemReplyView'
        - $ref: '#/components/schemas/NotificationsItemFeedView'
        - $ref: '#/components/schemas/NotificationsItemPostMentionView'
        - $ref: '#/components/schemas/NotificationsItemCommentMentionView' 
    NotificationsCountResponse:
      title: NotificationsCountResponse
      type: object
      properties:
        count:
          title: NotificationsCountResponse.count
          type: integer
          example: 42
    NotificationsMarkAllReadResponse:
      title: NotificationsMarkAllReadResponse
      type: object
      properties:
        mark_all_notifications_as_read:
          title: NotificationsMarkAllReadResponse.mark_all_notifications_as_read
          type: string
          example: complete
    GetCommunityModerationBansList:
      title: GetCommunityModerationBansList
      type: object
      properties:
        community_id:
          title: GetCommunityModerationBansList.community_id
          type: integer
          example: 42
        page:
          title: GetCommunityModerationBansList.page
          type: integer
          example: 1
      required:
        - comment_id
    GetCommunityModerationBansListResponse:
      title: GetCommunityModerationBansListResponse
      type: object
      properties:
        items:
          title: GetCommunityModerationBansListResponse.items
          type: array
          items:
            $ref: '#/components/schemas/CommunityModerationBanItem'
        next_page:
          title: GetCommunityModerationBansListResponse.next_page
          type: string
          example: "3"
    CommunityModerationBanItem:
      title: CommunityModerationBanItem
      type: object
      properties:
        reason:
          title: CommunityModerationBanItem.reason
          type: string
          example: "Violation of Rule 4"
        expiredAt:
          title: CommunityModerationBanItem.expiredAt
          type: string
          example: "2042-01-01T12:00:00"
        community: 
          title: CommunityModerationBanItem.community
          type: object
          $ref: '#/components/schemas/CommunityView'
        bannedUser:
          title: CommunityModerationBanItem.bannedUser
          type: object 
          $ref: '#/components/schemas/Person'
        bannedBy:
          title: CommunityModerationBanItem.bannedBy
          type: object 
          $ref: '#/components/schemas/Person'
        expired: 
          title: CommunityModerationBanItem.expired
          type: boolean
          example: false
    PostCommunityModerateBan:
      title: PostCommunityModerateBan
      type: object 
      properties:
        community_id: 
          title: PostCommunityModerateBan.community_id
          type: integer
          example: 42
        user_id: 
          title: PostCommunityModerateBan.user_id
          type: integer
          example: 1234
        reason: 
          title: PostCommunityModerateBan.reason
          type: string
          example: "Violation of Rule 1."
        expiredAt: 
          title: PostCommunityModerateBan.expiredAt
          type: string
          example: "2025-01-01T12:00:00"
      required:
        - community_id
        - user_id
        - reason 
        - expiredAt
    PostCommunityModerateBanResponse:
      title: PostCommunityModerateBanResponse
      type: object 
      $ref: '#/components/schemas/CommunityModerationBanItem'
    PutCommunityModerateUnBan:
      title: PutCommunityModerateUnBan
      type: object
      properties:
        community_id: 
          title: PutCommunityModerateUnBan.community_id
          type: integer
          example: 42
        user_id: 
          title: PutCommunityModerateUnBan.user_id
          type: integer
          example: 1234      
      required:
        - community_id
        - user_id          
    PutCommunityModerateUnBanResponse:
      title: PutCommunityModerateUnBanResponse
      type: object
      $ref: '#/components/schemas/CommunityModerationBanItem'
    PostCommunityModeratePostNsfw:
      title: PostCommunityModeratePostNsfw
      type: object
      properties:
        post_id:
          title: PostCommunityModeratePostNsfw.post_id
          type: integer
          example: 123456
        nsfw_status:
          title: PostCommunityModeratePostNsfw.nsfw_status
          type: boolean
          example: true
      required:
        - post_id 
        - nsfw_status
    PostCommunityModeratePostNsfwResponse:
      title: PostCommunityModeratePostNsfwResponse
      type: object
      $ref: '#/components/schemas/PostView'
          

        
          
  
